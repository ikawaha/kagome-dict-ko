// Code generated by go-bindata.
// sources:
// dict/kodict.aa
// dict/kodict.ab
// dict/kodict.ac
// dict/kodict.ad
// dict/kodict.ae
// dict/kodict.af
// dict/kodict.ag
// dict/kodict.ah
// dict/kodict.ai
// dict/kodict.aj
// dict/kodict.ak
// dict/kodict.al
// dict/kodict.am
// dict/kodict.an
// dict/kodict.ao
// dict/kodict.ap
// dict/kodict.aq
// dict/kodict.ar
// dict/kodict.as
// dict/kodict.at
// dict/kodict.au
// dict/kodict.av
// dict/kodict.aw
// dict/kodict.ax
// dict/kodict.ay
// dict/kodict.az
// dict/kodict.ba
// dict/kodict.bb
// dict/kodict.bc
// dict/kodict.bd
// dict/kodict.be
// dict/kodict.bf
// dict/kodict.bg
// dict/kodict.bh
// dict/kodict.bi
// DO NOT EDIT!

package data

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dict/kodict.aa": dictKodictAa,
	"dict/kodict.ab": dictKodictAb,
	"dict/kodict.ac": dictKodictAc,
	"dict/kodict.ad": dictKodictAd,
	"dict/kodict.ae": dictKodictAe,
	"dict/kodict.af": dictKodictAf,
	"dict/kodict.ag": dictKodictAg,
	"dict/kodict.ah": dictKodictAh,
	"dict/kodict.ai": dictKodictAi,
	"dict/kodict.aj": dictKodictAj,
	"dict/kodict.ak": dictKodictAk,
	"dict/kodict.al": dictKodictAl,
	"dict/kodict.am": dictKodictAm,
	"dict/kodict.an": dictKodictAn,
	"dict/kodict.ao": dictKodictAo,
	"dict/kodict.ap": dictKodictAp,
	"dict/kodict.aq": dictKodictAq,
	"dict/kodict.ar": dictKodictAr,
	"dict/kodict.as": dictKodictAs,
	"dict/kodict.at": dictKodictAt,
	"dict/kodict.au": dictKodictAu,
	"dict/kodict.av": dictKodictAv,
	"dict/kodict.aw": dictKodictAw,
	"dict/kodict.ax": dictKodictAx,
	"dict/kodict.ay": dictKodictAy,
	"dict/kodict.az": dictKodictAz,
	"dict/kodict.ba": dictKodictBa,
	"dict/kodict.bb": dictKodictBb,
	"dict/kodict.bc": dictKodictBc,
	"dict/kodict.bd": dictKodictBd,
	"dict/kodict.be": dictKodictBe,
	"dict/kodict.bf": dictKodictBf,
	"dict/kodict.bg": dictKodictBg,
	"dict/kodict.bh": dictKodictBh,
	"dict/kodict.bi": dictKodictBi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dict": &bintree{nil, map[string]*bintree{
		"kodict.aa": &bintree{dictKodictAa, map[string]*bintree{}},
		"kodict.ab": &bintree{dictKodictAb, map[string]*bintree{}},
		"kodict.ac": &bintree{dictKodictAc, map[string]*bintree{}},
		"kodict.ad": &bintree{dictKodictAd, map[string]*bintree{}},
		"kodict.ae": &bintree{dictKodictAe, map[string]*bintree{}},
		"kodict.af": &bintree{dictKodictAf, map[string]*bintree{}},
		"kodict.ag": &bintree{dictKodictAg, map[string]*bintree{}},
		"kodict.ah": &bintree{dictKodictAh, map[string]*bintree{}},
		"kodict.ai": &bintree{dictKodictAi, map[string]*bintree{}},
		"kodict.aj": &bintree{dictKodictAj, map[string]*bintree{}},
		"kodict.ak": &bintree{dictKodictAk, map[string]*bintree{}},
		"kodict.al": &bintree{dictKodictAl, map[string]*bintree{}},
		"kodict.am": &bintree{dictKodictAm, map[string]*bintree{}},
		"kodict.an": &bintree{dictKodictAn, map[string]*bintree{}},
		"kodict.ao": &bintree{dictKodictAo, map[string]*bintree{}},
		"kodict.ap": &bintree{dictKodictAp, map[string]*bintree{}},
		"kodict.aq": &bintree{dictKodictAq, map[string]*bintree{}},
		"kodict.ar": &bintree{dictKodictAr, map[string]*bintree{}},
		"kodict.as": &bintree{dictKodictAs, map[string]*bintree{}},
		"kodict.at": &bintree{dictKodictAt, map[string]*bintree{}},
		"kodict.au": &bintree{dictKodictAu, map[string]*bintree{}},
		"kodict.av": &bintree{dictKodictAv, map[string]*bintree{}},
		"kodict.aw": &bintree{dictKodictAw, map[string]*bintree{}},
		"kodict.ax": &bintree{dictKodictAx, map[string]*bintree{}},
		"kodict.ay": &bintree{dictKodictAy, map[string]*bintree{}},
		"kodict.az": &bintree{dictKodictAz, map[string]*bintree{}},
		"kodict.ba": &bintree{dictKodictBa, map[string]*bintree{}},
		"kodict.bb": &bintree{dictKodictBb, map[string]*bintree{}},
		"kodict.bc": &bintree{dictKodictBc, map[string]*bintree{}},
		"kodict.bd": &bintree{dictKodictBd, map[string]*bintree{}},
		"kodict.be": &bintree{dictKodictBe, map[string]*bintree{}},
		"kodict.bf": &bintree{dictKodictBf, map[string]*bintree{}},
		"kodict.bg": &bintree{dictKodictBg, map[string]*bintree{}},
		"kodict.bh": &bintree{dictKodictBh, map[string]*bintree{}},
		"kodict.bi": &bintree{dictKodictBi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

